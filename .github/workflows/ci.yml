name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # fetch entire history and tags

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Copy .env.example to .env
        run: cp .env.example .env

      - name: Inject secrets into .env
        run: |
          echo "FIREBASE_SERVICE_ACCOUNT_KEY=${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}" >> .env

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Type check
        run: npx tsc --noEmit

      - name: Prettier check
        run: npm run format

      - name: Build project
        run: npm run build

      - name: Get version from latest tag + commits since tag
        id: version
        run: |
          git fetch --tags   # ensure tags are fetched, optional if fetch-depth=0 in checkout
          DESCRIPTION=$(git describe --tags --long --always)
          # example: v1.0.0-25-g5ab9abd

          # Extract the full tag part (before commit count and hash)
          TAG=$(echo $DESCRIPTION | sed -E 's/^([^-]+)-[0-9]+-g[0-9a-f]+$/\1/')
          # TAG = v1.0.0

          # Extract commits since tag
          COMMITS_SINCE_TAG=$(echo $DESCRIPTION | sed -E 's/^[^-]+-([0-9]+)-g[0-9a-f]+$/\1/')
          # COMMITS_SINCE_TAG = 25

          # Remove the patch part (.0) from the tag to get 'v1.0'
          TAG_NO_PATCH=$(echo $TAG | sed -E 's/(\.[0-9]+)$//')
          # TAG_NO_PATCH = v1.0

          # Compose final version
          VERSION="${TAG_NO_PATCH}.${COMMITS_SINCE_TAG}"

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION is $VERSION"

      - name: Build Docker image with tags
        run: |
          docker build -t lucas-website:latest -t lucas-website:${{ env.VERSION }} .

      - name: Save Docker images as tarballs
        run: |
          docker save lucas-website:latest -o lucas-website_latest.tar
          docker save lucas-website:${{ env.VERSION }} -o lucas-website_${{ env.VERSION }}.tar

      # Uncomment and configure below to upload tarballs to your server via SFTP
      # - name: Setup SSH key
      #   run: |
      #     mkdir -p ~/.ssh
      #     echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
      #     chmod 600 ~/.ssh/id_rsa
      #     ssh-keyscan -H your.server.com >> ~/.ssh/known_hosts

      # - name: Upload latest tarball
      #   run: scp lucas-website_latest.tar username@your.server.com:/path/on/server/

      # - name: Upload versioned tarball
      #   run: scp lucas-website_${{ env.VERSION }}.tar username@your.server.com:/path/on/server/
